/*
 * sample1.mysql.cpp
 *
 * generated by the ORM-compiler version 0.2.1
 */
#include "sample1.mysql.h"

/*
 * The client namespace
 */
namespace orm
{

/*
 * The entity factory
 */
class EntityFactory : public cpporm::util::Factory<EntityFactory, cpporm::Entity, std::string>
{
private:
    EntityFactory()
    {
        Register<User>("User");
        Register<Organization>("Organization");
        Register<Team>("Team");
        Register<OrganizationType>("OrganizationType");
        Register<TeamMembership>("TeamMembership");
    }
    friend class Factory;
};

/*
* The entity creator function
*/
std::shared_ptr<cpporm::Entity> Create(const std::string &key)
{
    return EntityFactory::GetInstance().CreateShared(key);
}

/*******************************************************************************
 * User
 ******************************************************************************/
const std::string &User::_attribute_id::GetName() const
{
    static const std::string cName = "id";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap
        = {{"IDENTITY", ""}, {"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
User::_attribute_id &User::_attribute_id::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_id &User::_attribute_id::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_created_at::GetName() const
{
    static const std::string cName = "created_at";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_created_at::GetProperties() const
{
    static const cpporm::PropertyMap cMap
        = {{"DEFAULT", "CURRENT_TIMESTAMP"}, {"NOT_NULL", ""}, {"DATA_TYPE", "DATETIME"}};
    return cMap;
}
User::_attribute_created_at &User::_attribute_created_at::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_created_at &User::_attribute_created_at::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_updated_at::GetName() const
{
    static const std::string cName = "updated_at";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_updated_at::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "DATETIME"}};
    return cMap;
}
User::_attribute_updated_at &User::_attribute_updated_at::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_updated_at &User::_attribute_updated_at::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_deleted_at::GetName() const
{
    static const std::string cName = "deleted_at";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_deleted_at::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "DATETIME"}};
    return cMap;
}
User::_attribute_deleted_at &User::_attribute_deleted_at::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_deleted_at &User::_attribute_deleted_at::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_created_by::GetName() const
{
    static const std::string cName = "created_by";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_created_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
User::_attribute_created_by &User::_attribute_created_by::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_created_by &User::_attribute_created_by::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_updated_by::GetName() const
{
    static const std::string cName = "updated_by";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_updated_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
User::_attribute_updated_by &User::_attribute_updated_by::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_updated_by &User::_attribute_updated_by::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_deleted_by::GetName() const
{
    static const std::string cName = "deleted_by";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_deleted_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "BIGINT"}};
    return cMap;
}
User::_attribute_deleted_by &User::_attribute_deleted_by::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_deleted_by &User::_attribute_deleted_by::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_name::GetName() const
{
    static const std::string cName = "name";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_name::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "TEXT"}};
    return cMap;
}
User::_attribute_name &User::_attribute_name::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_name &User::_attribute_name::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_email::GetName() const
{
    static const std::string cName = "email";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_email::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "TEXT"}};
    return cMap;
}
User::_attribute_email &User::_attribute_email::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_email &User::_attribute_email::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_birth_date::GetName() const
{
    static const std::string cName = "birth_date";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_birth_date::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "DATE"}};
    return cMap;
}
User::_attribute_birth_date &User::_attribute_birth_date::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_birth_date &User::_attribute_birth_date::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_personal_id::GetName() const
{
    static const std::string cName = "personal_id";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_personal_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "TEXT"}};
    return cMap;
}
User::_attribute_personal_id &User::_attribute_personal_id::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_personal_id &User::_attribute_personal_id::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_attribute_professional_id::GetName() const
{
    static const std::string cName = "professional_id";
    return cName;
}
const cpporm::PropertyMap &User::_attribute_professional_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "TEXT"}};
    return cMap;
}
User::_attribute_professional_id &User::_attribute_professional_id::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
User::_attribute_professional_id &User::_attribute_professional_id::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &User::_index_primary_key::GetName() const
{
    static const std::string cName = "primary_key";
    return cName;
}
const cpporm::PropertyMap &User::_index_primary_key::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &User::_index_primary_key::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(User, id)};
    return cMap;
}
User::_index_primary_key User::primary_key;
const std::string &User::_index_unique_email::GetName() const
{
    static const std::string cName = "unique_email";
    return cName;
}
const cpporm::PropertyMap &User::_index_unique_email::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &User::_index_unique_email::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(User, email)};
    return cMap;
}
User::_index_unique_email User::unique_email;
const std::string &User::_index_foreign_key_created_by::GetName() const
{
    static const std::string cName = "foreign_key_created_by";
    return cName;
}
const cpporm::PropertyMap &User::_index_foreign_key_created_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &User::_index_foreign_key_created_by::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(User, created_by)};
    return cMap;
}
User::_index_foreign_key_created_by User::foreign_key_created_by;
const std::string &User::_index_foreign_key_updated_by::GetName() const
{
    static const std::string cName = "foreign_key_updated_by";
    return cName;
}
const cpporm::PropertyMap &User::_index_foreign_key_updated_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &User::_index_foreign_key_updated_by::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(User, updated_by)};
    return cMap;
}
User::_index_foreign_key_updated_by User::foreign_key_updated_by;
const std::string &User::_index_foreign_key_deleted_by::GetName() const
{
    static const std::string cName = "foreign_key_deleted_by";
    return cName;
}
const cpporm::PropertyMap &User::_index_foreign_key_deleted_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &User::_index_foreign_key_deleted_by::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(User, deleted_by)};
    return cMap;
}
User::_index_foreign_key_deleted_by User::foreign_key_deleted_by;
const std::string &User::_index_version_fields::GetName() const
{
    static const std::string cName = "version_fields";
    return cName;
}
const cpporm::PropertyMap &User::_index_version_fields::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &User::_index_version_fields::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(User, updated_at)};
    return cMap;
}
User::_index_version_fields User::version_fields;
const std::string &User::_relationship_created_by_User::GetName() const
{
    static const std::string cName = "created_by_User";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_created_by_User::GetProperties() const
{
    return User::foreign_key_created_by.GetProperties();
}
const std::vector<std::string> &User::_relationship_created_by_User::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"created_by"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_created_by_User::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_created_by_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_created_by";
    return cName;
}
cpporm::Entity &User::_relationship_created_by_User::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
User *User::_relationship_created_by_User::operator->()
{
    return Get<User>();
}
User &User::_relationship_created_by_User::operator*()
{
    return *Get<User>();
}
const std::string &User::_relationship_updated_by_User::GetName() const
{
    static const std::string cName = "updated_by_User";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_updated_by_User::GetProperties() const
{
    return User::foreign_key_updated_by.GetProperties();
}
const std::vector<std::string> &User::_relationship_updated_by_User::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"updated_by"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_updated_by_User::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_updated_by_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_updated_by";
    return cName;
}
cpporm::Entity &User::_relationship_updated_by_User::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
User *User::_relationship_updated_by_User::operator->()
{
    return Get<User>();
}
User &User::_relationship_updated_by_User::operator*()
{
    return *Get<User>();
}
const std::string &User::_relationship_deleted_by_User::GetName() const
{
    static const std::string cName = "deleted_by_User";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_deleted_by_User::GetProperties() const
{
    return User::foreign_key_deleted_by.GetProperties();
}
const std::vector<std::string> &User::_relationship_deleted_by_User::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"deleted_by"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_deleted_by_User::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_deleted_by_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_deleted_by";
    return cName;
}
cpporm::Entity &User::_relationship_deleted_by_User::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
User *User::_relationship_deleted_by_User::operator->()
{
    return Get<User>();
}
User &User::_relationship_deleted_by_User::operator*()
{
    return *Get<User>();
}
const std::string &User::_relationship_all_User_created_by::GetName() const
{
    static const std::string cName = "all_User_created_by";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_User_created_by::GetProperties() const
{
    return User::foreign_key_created_by.GetProperties();
}
const std::vector<std::string> &User::_relationship_all_User_created_by::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"created_by"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_all_User_created_by::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_User_created_by::GetReciprocalName() const
{
    static const std::string cName = "created_by_User";
    return cName;
}
cpporm::Entity &User::_relationship_all_User_created_by::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
const std::string &User::_relationship_all_User_updated_by::GetName() const
{
    static const std::string cName = "all_User_updated_by";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_User_updated_by::GetProperties() const
{
    return User::foreign_key_updated_by.GetProperties();
}
const std::vector<std::string> &User::_relationship_all_User_updated_by::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"updated_by"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_all_User_updated_by::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_User_updated_by::GetReciprocalName() const
{
    static const std::string cName = "updated_by_User";
    return cName;
}
cpporm::Entity &User::_relationship_all_User_updated_by::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
const std::string &User::_relationship_all_User_deleted_by::GetName() const
{
    static const std::string cName = "all_User_deleted_by";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_User_deleted_by::GetProperties() const
{
    return User::foreign_key_deleted_by.GetProperties();
}
const std::vector<std::string> &User::_relationship_all_User_deleted_by::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"deleted_by"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_all_User_deleted_by::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_User_deleted_by::GetReciprocalName() const
{
    static const std::string cName = "deleted_by_User";
    return cName;
}
cpporm::Entity &User::_relationship_all_User_deleted_by::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
const std::string &User::_relationship_all_Organization_created_by::GetName() const
{
    static const std::string cName = "all_Organization_created_by";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_Organization_created_by::GetProperties() const
{
    return Organization::foreign_key_created_by.GetProperties();
}
const std::vector<std::string>
    &User::_relationship_all_Organization_created_by::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"created_by"};
    return cNames;
}
const std::vector<std::string>
    &User::_relationship_all_Organization_created_by::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_Organization_created_by::GetReciprocalName() const
{
    static const std::string cName = "created_by_Organization";
    return cName;
}
cpporm::Entity &User::_relationship_all_Organization_created_by::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
const std::string &User::_relationship_all_Organization_updated_by::GetName() const
{
    static const std::string cName = "all_Organization_updated_by";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_Organization_updated_by::GetProperties() const
{
    return Organization::foreign_key_updated_by.GetProperties();
}
const std::vector<std::string>
    &User::_relationship_all_Organization_updated_by::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"updated_by"};
    return cNames;
}
const std::vector<std::string>
    &User::_relationship_all_Organization_updated_by::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_Organization_updated_by::GetReciprocalName() const
{
    static const std::string cName = "updated_by_Organization";
    return cName;
}
cpporm::Entity &User::_relationship_all_Organization_updated_by::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
const std::string &User::_relationship_all_Organization_deleted_by::GetName() const
{
    static const std::string cName = "all_Organization_deleted_by";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_Organization_deleted_by::GetProperties() const
{
    return Organization::foreign_key_deleted_by.GetProperties();
}
const std::vector<std::string>
    &User::_relationship_all_Organization_deleted_by::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"deleted_by"};
    return cNames;
}
const std::vector<std::string>
    &User::_relationship_all_Organization_deleted_by::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_Organization_deleted_by::GetReciprocalName() const
{
    static const std::string cName = "deleted_by_Organization";
    return cName;
}
cpporm::Entity &User::_relationship_all_Organization_deleted_by::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
const std::string &User::_relationship_all_Team_created_by::GetName() const
{
    static const std::string cName = "all_Team_created_by";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_Team_created_by::GetProperties() const
{
    return Team::foreign_key_created_by.GetProperties();
}
const std::vector<std::string> &User::_relationship_all_Team_created_by::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"created_by"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_all_Team_created_by::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_Team_created_by::GetReciprocalName() const
{
    static const std::string cName = "created_by_Team";
    return cName;
}
cpporm::Entity &User::_relationship_all_Team_created_by::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
const std::string &User::_relationship_all_Team_updated_by::GetName() const
{
    static const std::string cName = "all_Team_updated_by";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_Team_updated_by::GetProperties() const
{
    return Team::foreign_key_updated_by.GetProperties();
}
const std::vector<std::string> &User::_relationship_all_Team_updated_by::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"updated_by"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_all_Team_updated_by::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_Team_updated_by::GetReciprocalName() const
{
    static const std::string cName = "updated_by_Team";
    return cName;
}
cpporm::Entity &User::_relationship_all_Team_updated_by::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
const std::string &User::_relationship_all_Team_deleted_by::GetName() const
{
    static const std::string cName = "all_Team_deleted_by";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_Team_deleted_by::GetProperties() const
{
    return Team::foreign_key_deleted_by.GetProperties();
}
const std::vector<std::string> &User::_relationship_all_Team_deleted_by::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"deleted_by"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_all_Team_deleted_by::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_Team_deleted_by::GetReciprocalName() const
{
    static const std::string cName = "deleted_by_Team";
    return cName;
}
cpporm::Entity &User::_relationship_all_Team_deleted_by::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
const std::string &User::_relationship_all_TeamMembership_user_id::GetName() const
{
    static const std::string cName = "all_TeamMembership_user_id";
    return cName;
}
const cpporm::PropertyMap &User::_relationship_all_TeamMembership_user_id::GetProperties() const
{
    return TeamMembership::foreign_key_user_id.GetProperties();
}
const std::vector<std::string> &User::_relationship_all_TeamMembership_user_id::GetForeignKeyNames()
    const
{
    static const std::vector<std::string> cNames = {"user_id"};
    return cNames;
}
const std::vector<std::string> &User::_relationship_all_TeamMembership_user_id::GetReferencedNames()
    const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &User::_relationship_all_TeamMembership_user_id::GetReciprocalName() const
{
    static const std::string cName = "user_id_TeamMembership";
    return cName;
}
cpporm::Entity &User::_relationship_all_TeamMembership_user_id::GetPrototype() const
{
    static User cEntity;
    return cEntity;
}
cpporm::Entity *User::Clone() const
{
    return new User(*this);
}
const std::string &User::GetName() const
{
    static const std::string cName = "User";
    return cName;
}
const cpporm::PropertyMap &User::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &User::GetAttributes() const
{
    static const cpporm::AttributeMap cMap
        = {CPPORM_MAP_ATTRIBUTE(User, id),          CPPORM_MAP_ATTRIBUTE(User, created_at),
           CPPORM_MAP_ATTRIBUTE(User, updated_at),  CPPORM_MAP_ATTRIBUTE(User, deleted_at),
           CPPORM_MAP_ATTRIBUTE(User, created_by),  CPPORM_MAP_ATTRIBUTE(User, updated_by),
           CPPORM_MAP_ATTRIBUTE(User, deleted_by),  CPPORM_MAP_ATTRIBUTE(User, name),
           CPPORM_MAP_ATTRIBUTE(User, email),       CPPORM_MAP_ATTRIBUTE(User, birth_date),
           CPPORM_MAP_ATTRIBUTE(User, personal_id), CPPORM_MAP_ATTRIBUTE(User, professional_id)};
    return cMap;
}
const cpporm::IndexMap &User::GetIndices() const
{
    static const cpporm::IndexMap cMap = {CPPORM_MAP_INDEX(User, primary_key),
                                          CPPORM_MAP_INDEX(User, unique_email),
                                          CPPORM_MAP_INDEX(User, foreign_key_created_by),
                                          CPPORM_MAP_INDEX(User, foreign_key_updated_by),
                                          CPPORM_MAP_INDEX(User, foreign_key_deleted_by),
                                          CPPORM_MAP_INDEX(User, version_fields)};
    return cMap;
}
const cpporm::RelationshipMap &User::GetRelationships() const
{
    static const cpporm::RelationshipMap cMap
        = {CPPORM_MAP_RELATIONSHIP(User, created_by_User),
           CPPORM_MAP_RELATIONSHIP(User, updated_by_User),
           CPPORM_MAP_RELATIONSHIP(User, deleted_by_User),
           CPPORM_MAP_RELATIONSHIP(User, all_User_created_by),
           CPPORM_MAP_RELATIONSHIP(User, all_User_updated_by),
           CPPORM_MAP_RELATIONSHIP(User, all_User_deleted_by),
           CPPORM_MAP_RELATIONSHIP(User, all_Organization_created_by),
           CPPORM_MAP_RELATIONSHIP(User, all_Organization_updated_by),
           CPPORM_MAP_RELATIONSHIP(User, all_Organization_deleted_by),
           CPPORM_MAP_RELATIONSHIP(User, all_Team_created_by),
           CPPORM_MAP_RELATIONSHIP(User, all_Team_updated_by),
           CPPORM_MAP_RELATIONSHIP(User, all_Team_deleted_by),
           CPPORM_MAP_RELATIONSHIP(User, all_TeamMembership_user_id)};
    return cMap;
}

/*******************************************************************************
 * Organization
 ******************************************************************************/
const std::string &Organization::_attribute_id::GetName() const
{
    static const std::string cName = "id";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap
        = {{"IDENTITY", ""}, {"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
Organization::_attribute_id &Organization::_attribute_id::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_id &Organization::_attribute_id::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_created_at::GetName() const
{
    static const std::string cName = "created_at";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_created_at::GetProperties() const
{
    static const cpporm::PropertyMap cMap
        = {{"DEFAULT", "CURRENT_TIMESTAMP"}, {"NOT_NULL", ""}, {"DATA_TYPE", "DATETIME"}};
    return cMap;
}
Organization::_attribute_created_at &Organization::_attribute_created_at::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_created_at &Organization::_attribute_created_at::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_updated_at::GetName() const
{
    static const std::string cName = "updated_at";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_updated_at::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "DATETIME"}};
    return cMap;
}
Organization::_attribute_updated_at &Organization::_attribute_updated_at::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_updated_at &Organization::_attribute_updated_at::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_deleted_at::GetName() const
{
    static const std::string cName = "deleted_at";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_deleted_at::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "DATETIME"}};
    return cMap;
}
Organization::_attribute_deleted_at &Organization::_attribute_deleted_at::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_deleted_at &Organization::_attribute_deleted_at::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_created_by::GetName() const
{
    static const std::string cName = "created_by";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_created_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
Organization::_attribute_created_by &Organization::_attribute_created_by::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_created_by &Organization::_attribute_created_by::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_updated_by::GetName() const
{
    static const std::string cName = "updated_by";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_updated_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
Organization::_attribute_updated_by &Organization::_attribute_updated_by::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_updated_by &Organization::_attribute_updated_by::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_deleted_by::GetName() const
{
    static const std::string cName = "deleted_by";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_deleted_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "BIGINT"}};
    return cMap;
}
Organization::_attribute_deleted_by &Organization::_attribute_deleted_by::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_deleted_by &Organization::_attribute_deleted_by::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_name::GetName() const
{
    static const std::string cName = "name";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_name::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "TEXT"}};
    return cMap;
}
Organization::_attribute_name &Organization::_attribute_name::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_name &Organization::_attribute_name::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_type_id::GetName() const
{
    static const std::string cName = "type_id";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_type_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "SMALLINT"}};
    return cMap;
}
Organization::_attribute_type_id &Organization::_attribute_type_id::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_type_id &Organization::_attribute_type_id::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_legal_id::GetName() const
{
    static const std::string cName = "legal_id";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_legal_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "TEXT"}};
    return cMap;
}
Organization::_attribute_legal_id &Organization::_attribute_legal_id::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_legal_id &Organization::_attribute_legal_id::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_legal_name::GetName() const
{
    static const std::string cName = "legal_name";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_legal_name::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "TEXT"}};
    return cMap;
}
Organization::_attribute_legal_name &Organization::_attribute_legal_name::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_legal_name &Organization::_attribute_legal_name::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_attribute_description::GetName() const
{
    static const std::string cName = "description";
    return cName;
}
const cpporm::PropertyMap &Organization::_attribute_description::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "TEXT"}};
    return cMap;
}
Organization::_attribute_description &Organization::_attribute_description::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Organization::_attribute_description &Organization::_attribute_description::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Organization::_index_primary_key::GetName() const
{
    static const std::string cName = "primary_key";
    return cName;
}
const cpporm::PropertyMap &Organization::_index_primary_key::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Organization::_index_primary_key::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Organization, id)};
    return cMap;
}
Organization::_index_primary_key Organization::primary_key;
const std::string &Organization::_index_unique_name::GetName() const
{
    static const std::string cName = "unique_name";
    return cName;
}
const cpporm::PropertyMap &Organization::_index_unique_name::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Organization::_index_unique_name::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Organization, name)};
    return cMap;
}
Organization::_index_unique_name Organization::unique_name;
const std::string &Organization::_index_foreign_key_created_by::GetName() const
{
    static const std::string cName = "foreign_key_created_by";
    return cName;
}
const cpporm::PropertyMap &Organization::_index_foreign_key_created_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Organization::_index_foreign_key_created_by::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Organization, created_by)};
    return cMap;
}
Organization::_index_foreign_key_created_by Organization::foreign_key_created_by;
const std::string &Organization::_index_foreign_key_type_id::GetName() const
{
    static const std::string cName = "foreign_key_type_id";
    return cName;
}
const cpporm::PropertyMap &Organization::_index_foreign_key_type_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Organization::_index_foreign_key_type_id::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Organization, type_id)};
    return cMap;
}
Organization::_index_foreign_key_type_id Organization::foreign_key_type_id;
const std::string &Organization::_index_foreign_key_updated_by::GetName() const
{
    static const std::string cName = "foreign_key_updated_by";
    return cName;
}
const cpporm::PropertyMap &Organization::_index_foreign_key_updated_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Organization::_index_foreign_key_updated_by::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Organization, updated_by)};
    return cMap;
}
Organization::_index_foreign_key_updated_by Organization::foreign_key_updated_by;
const std::string &Organization::_index_foreign_key_deleted_by::GetName() const
{
    static const std::string cName = "foreign_key_deleted_by";
    return cName;
}
const cpporm::PropertyMap &Organization::_index_foreign_key_deleted_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Organization::_index_foreign_key_deleted_by::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Organization, deleted_by)};
    return cMap;
}
Organization::_index_foreign_key_deleted_by Organization::foreign_key_deleted_by;
const std::string &Organization::_index_version_fields::GetName() const
{
    static const std::string cName = "version_fields";
    return cName;
}
const cpporm::PropertyMap &Organization::_index_version_fields::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Organization::_index_version_fields::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Organization, updated_at)};
    return cMap;
}
Organization::_index_version_fields Organization::version_fields;
const std::string &Organization::_relationship_created_by_User::GetName() const
{
    static const std::string cName = "created_by_User";
    return cName;
}
const cpporm::PropertyMap &Organization::_relationship_created_by_User::GetProperties() const
{
    return Organization::foreign_key_created_by.GetProperties();
}
const std::vector<std::string> &Organization::_relationship_created_by_User::GetForeignKeyNames()
    const
{
    static const std::vector<std::string> cNames = {"created_by"};
    return cNames;
}
const std::vector<std::string> &Organization::_relationship_created_by_User::GetReferencedNames()
    const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Organization::_relationship_created_by_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_created_by";
    return cName;
}
cpporm::Entity &Organization::_relationship_created_by_User::GetPrototype() const
{
    static Organization cEntity;
    return cEntity;
}
User *Organization::_relationship_created_by_User::operator->()
{
    return Get<User>();
}
User &Organization::_relationship_created_by_User::operator*()
{
    return *Get<User>();
}
const std::string &Organization::_relationship_updated_by_User::GetName() const
{
    static const std::string cName = "updated_by_User";
    return cName;
}
const cpporm::PropertyMap &Organization::_relationship_updated_by_User::GetProperties() const
{
    return Organization::foreign_key_updated_by.GetProperties();
}
const std::vector<std::string> &Organization::_relationship_updated_by_User::GetForeignKeyNames()
    const
{
    static const std::vector<std::string> cNames = {"updated_by"};
    return cNames;
}
const std::vector<std::string> &Organization::_relationship_updated_by_User::GetReferencedNames()
    const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Organization::_relationship_updated_by_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_updated_by";
    return cName;
}
cpporm::Entity &Organization::_relationship_updated_by_User::GetPrototype() const
{
    static Organization cEntity;
    return cEntity;
}
User *Organization::_relationship_updated_by_User::operator->()
{
    return Get<User>();
}
User &Organization::_relationship_updated_by_User::operator*()
{
    return *Get<User>();
}
const std::string &Organization::_relationship_deleted_by_User::GetName() const
{
    static const std::string cName = "deleted_by_User";
    return cName;
}
const cpporm::PropertyMap &Organization::_relationship_deleted_by_User::GetProperties() const
{
    return Organization::foreign_key_deleted_by.GetProperties();
}
const std::vector<std::string> &Organization::_relationship_deleted_by_User::GetForeignKeyNames()
    const
{
    static const std::vector<std::string> cNames = {"deleted_by"};
    return cNames;
}
const std::vector<std::string> &Organization::_relationship_deleted_by_User::GetReferencedNames()
    const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Organization::_relationship_deleted_by_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_deleted_by";
    return cName;
}
cpporm::Entity &Organization::_relationship_deleted_by_User::GetPrototype() const
{
    static Organization cEntity;
    return cEntity;
}
User *Organization::_relationship_deleted_by_User::operator->()
{
    return Get<User>();
}
User &Organization::_relationship_deleted_by_User::operator*()
{
    return *Get<User>();
}
const std::string &Organization::_relationship_type_id_OrganizationType::GetName() const
{
    static const std::string cName = "type_id_OrganizationType";
    return cName;
}
const cpporm::PropertyMap &Organization::_relationship_type_id_OrganizationType::GetProperties()
    const
{
    return Organization::foreign_key_type_id.GetProperties();
}
const std::vector<std::string>
    &Organization::_relationship_type_id_OrganizationType::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"type_id"};
    return cNames;
}
const std::vector<std::string>
    &Organization::_relationship_type_id_OrganizationType::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Organization::_relationship_type_id_OrganizationType::GetReciprocalName() const
{
    static const std::string cName = "all_OrganizationType_type_id";
    return cName;
}
cpporm::Entity &Organization::_relationship_type_id_OrganizationType::GetPrototype() const
{
    static Organization cEntity;
    return cEntity;
}
OrganizationType *Organization::_relationship_type_id_OrganizationType::operator->()
{
    return Get<OrganizationType>();
}
OrganizationType &Organization::_relationship_type_id_OrganizationType::operator*()
{
    return *Get<OrganizationType>();
}
const std::string &Organization::_relationship_all_Team_organization_id::GetName() const
{
    static const std::string cName = "all_Team_organization_id";
    return cName;
}
const cpporm::PropertyMap &Organization::_relationship_all_Team_organization_id::GetProperties()
    const
{
    return Team::foreign_key_organization_id.GetProperties();
}
const std::vector<std::string>
    &Organization::_relationship_all_Team_organization_id::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"organization_id"};
    return cNames;
}
const std::vector<std::string>
    &Organization::_relationship_all_Team_organization_id::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Organization::_relationship_all_Team_organization_id::GetReciprocalName() const
{
    static const std::string cName = "organization_id_Team";
    return cName;
}
cpporm::Entity &Organization::_relationship_all_Team_organization_id::GetPrototype() const
{
    static Organization cEntity;
    return cEntity;
}
cpporm::Entity *Organization::Clone() const
{
    return new Organization(*this);
}
const std::string &Organization::GetName() const
{
    static const std::string cName = "Organization";
    return cName;
}
const cpporm::PropertyMap &Organization::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Organization::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Organization, id),
                                              CPPORM_MAP_ATTRIBUTE(Organization, created_at),
                                              CPPORM_MAP_ATTRIBUTE(Organization, updated_at),
                                              CPPORM_MAP_ATTRIBUTE(Organization, deleted_at),
                                              CPPORM_MAP_ATTRIBUTE(Organization, created_by),
                                              CPPORM_MAP_ATTRIBUTE(Organization, updated_by),
                                              CPPORM_MAP_ATTRIBUTE(Organization, deleted_by),
                                              CPPORM_MAP_ATTRIBUTE(Organization, name),
                                              CPPORM_MAP_ATTRIBUTE(Organization, type_id),
                                              CPPORM_MAP_ATTRIBUTE(Organization, legal_id),
                                              CPPORM_MAP_ATTRIBUTE(Organization, legal_name),
                                              CPPORM_MAP_ATTRIBUTE(Organization, description)};
    return cMap;
}
const cpporm::IndexMap &Organization::GetIndices() const
{
    static const cpporm::IndexMap cMap = {CPPORM_MAP_INDEX(Organization, primary_key),
                                          CPPORM_MAP_INDEX(Organization, unique_name),
                                          CPPORM_MAP_INDEX(Organization, foreign_key_created_by),
                                          CPPORM_MAP_INDEX(Organization, foreign_key_type_id),
                                          CPPORM_MAP_INDEX(Organization, foreign_key_updated_by),
                                          CPPORM_MAP_INDEX(Organization, foreign_key_deleted_by),
                                          CPPORM_MAP_INDEX(Organization, version_fields)};
    return cMap;
}
const cpporm::RelationshipMap &Organization::GetRelationships() const
{
    static const cpporm::RelationshipMap cMap
        = {CPPORM_MAP_RELATIONSHIP(Organization, created_by_User),
           CPPORM_MAP_RELATIONSHIP(Organization, updated_by_User),
           CPPORM_MAP_RELATIONSHIP(Organization, deleted_by_User),
           CPPORM_MAP_RELATIONSHIP(Organization, type_id_OrganizationType),
           CPPORM_MAP_RELATIONSHIP(Organization, all_Team_organization_id)};
    return cMap;
}

/*******************************************************************************
 * Team
 ******************************************************************************/
const std::string &Team::_attribute_id::GetName() const
{
    static const std::string cName = "id";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap
        = {{"IDENTITY", ""}, {"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
Team::_attribute_id &Team::_attribute_id::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_id &Team::_attribute_id::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_attribute_created_at::GetName() const
{
    static const std::string cName = "created_at";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_created_at::GetProperties() const
{
    static const cpporm::PropertyMap cMap
        = {{"DEFAULT", "CURRENT_TIMESTAMP"}, {"NOT_NULL", ""}, {"DATA_TYPE", "DATETIME"}};
    return cMap;
}
Team::_attribute_created_at &Team::_attribute_created_at::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_created_at &Team::_attribute_created_at::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_attribute_updated_at::GetName() const
{
    static const std::string cName = "updated_at";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_updated_at::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "DATETIME"}};
    return cMap;
}
Team::_attribute_updated_at &Team::_attribute_updated_at::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_updated_at &Team::_attribute_updated_at::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_attribute_deleted_at::GetName() const
{
    static const std::string cName = "deleted_at";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_deleted_at::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "DATETIME"}};
    return cMap;
}
Team::_attribute_deleted_at &Team::_attribute_deleted_at::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_deleted_at &Team::_attribute_deleted_at::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_attribute_created_by::GetName() const
{
    static const std::string cName = "created_by";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_created_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
Team::_attribute_created_by &Team::_attribute_created_by::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_created_by &Team::_attribute_created_by::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_attribute_updated_by::GetName() const
{
    static const std::string cName = "updated_by";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_updated_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
Team::_attribute_updated_by &Team::_attribute_updated_by::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_updated_by &Team::_attribute_updated_by::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_attribute_deleted_by::GetName() const
{
    static const std::string cName = "deleted_by";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_deleted_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "BIGINT"}};
    return cMap;
}
Team::_attribute_deleted_by &Team::_attribute_deleted_by::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_deleted_by &Team::_attribute_deleted_by::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_attribute_organization_id::GetName() const
{
    static const std::string cName = "organization_id";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_organization_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
Team::_attribute_organization_id &Team::_attribute_organization_id::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_organization_id &Team::_attribute_organization_id::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_attribute_name::GetName() const
{
    static const std::string cName = "name";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_name::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "TEXT"}};
    return cMap;
}
Team::_attribute_name &Team::_attribute_name::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_name &Team::_attribute_name::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_attribute_description::GetName() const
{
    static const std::string cName = "description";
    return cName;
}
const cpporm::PropertyMap &Team::_attribute_description::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"DATA_TYPE", "TEXT"}};
    return cMap;
}
Team::_attribute_description &Team::_attribute_description::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
Team::_attribute_description &Team::_attribute_description::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &Team::_index_primary_key::GetName() const
{
    static const std::string cName = "primary_key";
    return cName;
}
const cpporm::PropertyMap &Team::_index_primary_key::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Team::_index_primary_key::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Team, id)};
    return cMap;
}
Team::_index_primary_key Team::primary_key;
const std::string &Team::_index_unique_organization_id_name::GetName() const
{
    static const std::string cName = "unique_organization_id_name";
    return cName;
}
const cpporm::PropertyMap &Team::_index_unique_organization_id_name::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Team::_index_unique_organization_id_name::GetAttributes() const
{
    static const cpporm::AttributeMap cMap
        = {CPPORM_MAP_ATTRIBUTE(Team, organization_id), CPPORM_MAP_ATTRIBUTE(Team, name)};
    return cMap;
}
Team::_index_unique_organization_id_name Team::unique_organization_id_name;
const std::string &Team::_index_foreign_key_created_by::GetName() const
{
    static const std::string cName = "foreign_key_created_by";
    return cName;
}
const cpporm::PropertyMap &Team::_index_foreign_key_created_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Team::_index_foreign_key_created_by::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Team, created_by)};
    return cMap;
}
Team::_index_foreign_key_created_by Team::foreign_key_created_by;
const std::string &Team::_index_foreign_key_organization_id::GetName() const
{
    static const std::string cName = "foreign_key_organization_id";
    return cName;
}
const cpporm::PropertyMap &Team::_index_foreign_key_organization_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Team::_index_foreign_key_organization_id::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Team, organization_id)};
    return cMap;
}
Team::_index_foreign_key_organization_id Team::foreign_key_organization_id;
const std::string &Team::_index_foreign_key_updated_by::GetName() const
{
    static const std::string cName = "foreign_key_updated_by";
    return cName;
}
const cpporm::PropertyMap &Team::_index_foreign_key_updated_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Team::_index_foreign_key_updated_by::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Team, updated_by)};
    return cMap;
}
Team::_index_foreign_key_updated_by Team::foreign_key_updated_by;
const std::string &Team::_index_foreign_key_deleted_by::GetName() const
{
    static const std::string cName = "foreign_key_deleted_by";
    return cName;
}
const cpporm::PropertyMap &Team::_index_foreign_key_deleted_by::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Team::_index_foreign_key_deleted_by::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Team, deleted_by)};
    return cMap;
}
Team::_index_foreign_key_deleted_by Team::foreign_key_deleted_by;
const std::string &Team::_index_version_fields::GetName() const
{
    static const std::string cName = "version_fields";
    return cName;
}
const cpporm::PropertyMap &Team::_index_version_fields::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Team::_index_version_fields::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(Team, updated_at)};
    return cMap;
}
Team::_index_version_fields Team::version_fields;
const std::string &Team::_relationship_created_by_User::GetName() const
{
    static const std::string cName = "created_by_User";
    return cName;
}
const cpporm::PropertyMap &Team::_relationship_created_by_User::GetProperties() const
{
    return Team::foreign_key_created_by.GetProperties();
}
const std::vector<std::string> &Team::_relationship_created_by_User::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"created_by"};
    return cNames;
}
const std::vector<std::string> &Team::_relationship_created_by_User::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Team::_relationship_created_by_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_created_by";
    return cName;
}
cpporm::Entity &Team::_relationship_created_by_User::GetPrototype() const
{
    static Team cEntity;
    return cEntity;
}
User *Team::_relationship_created_by_User::operator->()
{
    return Get<User>();
}
User &Team::_relationship_created_by_User::operator*()
{
    return *Get<User>();
}
const std::string &Team::_relationship_updated_by_User::GetName() const
{
    static const std::string cName = "updated_by_User";
    return cName;
}
const cpporm::PropertyMap &Team::_relationship_updated_by_User::GetProperties() const
{
    return Team::foreign_key_updated_by.GetProperties();
}
const std::vector<std::string> &Team::_relationship_updated_by_User::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"updated_by"};
    return cNames;
}
const std::vector<std::string> &Team::_relationship_updated_by_User::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Team::_relationship_updated_by_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_updated_by";
    return cName;
}
cpporm::Entity &Team::_relationship_updated_by_User::GetPrototype() const
{
    static Team cEntity;
    return cEntity;
}
User *Team::_relationship_updated_by_User::operator->()
{
    return Get<User>();
}
User &Team::_relationship_updated_by_User::operator*()
{
    return *Get<User>();
}
const std::string &Team::_relationship_deleted_by_User::GetName() const
{
    static const std::string cName = "deleted_by_User";
    return cName;
}
const cpporm::PropertyMap &Team::_relationship_deleted_by_User::GetProperties() const
{
    return Team::foreign_key_deleted_by.GetProperties();
}
const std::vector<std::string> &Team::_relationship_deleted_by_User::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"deleted_by"};
    return cNames;
}
const std::vector<std::string> &Team::_relationship_deleted_by_User::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Team::_relationship_deleted_by_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_deleted_by";
    return cName;
}
cpporm::Entity &Team::_relationship_deleted_by_User::GetPrototype() const
{
    static Team cEntity;
    return cEntity;
}
User *Team::_relationship_deleted_by_User::operator->()
{
    return Get<User>();
}
User &Team::_relationship_deleted_by_User::operator*()
{
    return *Get<User>();
}
const std::string &Team::_relationship_organization_id_Organization::GetName() const
{
    static const std::string cName = "organization_id_Organization";
    return cName;
}
const cpporm::PropertyMap &Team::_relationship_organization_id_Organization::GetProperties() const
{
    return Team::foreign_key_organization_id.GetProperties();
}
const std::vector<std::string>
    &Team::_relationship_organization_id_Organization::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"organization_id"};
    return cNames;
}
const std::vector<std::string>
    &Team::_relationship_organization_id_Organization::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Team::_relationship_organization_id_Organization::GetReciprocalName() const
{
    static const std::string cName = "all_Organization_organization_id";
    return cName;
}
cpporm::Entity &Team::_relationship_organization_id_Organization::GetPrototype() const
{
    static Team cEntity;
    return cEntity;
}
Organization *Team::_relationship_organization_id_Organization::operator->()
{
    return Get<Organization>();
}
Organization &Team::_relationship_organization_id_Organization::operator*()
{
    return *Get<Organization>();
}
const std::string &Team::_relationship_all_TeamMembership_team_id::GetName() const
{
    static const std::string cName = "all_TeamMembership_team_id";
    return cName;
}
const cpporm::PropertyMap &Team::_relationship_all_TeamMembership_team_id::GetProperties() const
{
    return TeamMembership::foreign_key_team_id.GetProperties();
}
const std::vector<std::string> &Team::_relationship_all_TeamMembership_team_id::GetForeignKeyNames()
    const
{
    static const std::vector<std::string> cNames = {"team_id"};
    return cNames;
}
const std::vector<std::string> &Team::_relationship_all_TeamMembership_team_id::GetReferencedNames()
    const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &Team::_relationship_all_TeamMembership_team_id::GetReciprocalName() const
{
    static const std::string cName = "team_id_TeamMembership";
    return cName;
}
cpporm::Entity &Team::_relationship_all_TeamMembership_team_id::GetPrototype() const
{
    static Team cEntity;
    return cEntity;
}
cpporm::Entity *Team::Clone() const
{
    return new Team(*this);
}
const std::string &Team::GetName() const
{
    static const std::string cName = "Team";
    return cName;
}
const cpporm::PropertyMap &Team::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &Team::GetAttributes() const
{
    static const cpporm::AttributeMap cMap
        = {CPPORM_MAP_ATTRIBUTE(Team, id),         CPPORM_MAP_ATTRIBUTE(Team, created_at),
           CPPORM_MAP_ATTRIBUTE(Team, updated_at), CPPORM_MAP_ATTRIBUTE(Team, deleted_at),
           CPPORM_MAP_ATTRIBUTE(Team, created_by), CPPORM_MAP_ATTRIBUTE(Team, updated_by),
           CPPORM_MAP_ATTRIBUTE(Team, deleted_by), CPPORM_MAP_ATTRIBUTE(Team, organization_id),
           CPPORM_MAP_ATTRIBUTE(Team, name),       CPPORM_MAP_ATTRIBUTE(Team, description)};
    return cMap;
}
const cpporm::IndexMap &Team::GetIndices() const
{
    static const cpporm::IndexMap cMap = {CPPORM_MAP_INDEX(Team, primary_key),
                                          CPPORM_MAP_INDEX(Team, unique_organization_id_name),
                                          CPPORM_MAP_INDEX(Team, foreign_key_created_by),
                                          CPPORM_MAP_INDEX(Team, foreign_key_organization_id),
                                          CPPORM_MAP_INDEX(Team, foreign_key_updated_by),
                                          CPPORM_MAP_INDEX(Team, foreign_key_deleted_by),
                                          CPPORM_MAP_INDEX(Team, version_fields)};
    return cMap;
}
const cpporm::RelationshipMap &Team::GetRelationships() const
{
    static const cpporm::RelationshipMap cMap
        = {CPPORM_MAP_RELATIONSHIP(Team, created_by_User),
           CPPORM_MAP_RELATIONSHIP(Team, updated_by_User),
           CPPORM_MAP_RELATIONSHIP(Team, deleted_by_User),
           CPPORM_MAP_RELATIONSHIP(Team, organization_id_Organization),
           CPPORM_MAP_RELATIONSHIP(Team, all_TeamMembership_team_id)};
    return cMap;
}

/*******************************************************************************
 * OrganizationType
 ******************************************************************************/
const std::string &OrganizationType::_attribute_id::GetName() const
{
    static const std::string cName = "id";
    return cName;
}
const cpporm::PropertyMap &OrganizationType::_attribute_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "SMALLINT"}};
    return cMap;
}
OrganizationType::_attribute_id &OrganizationType::_attribute_id::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
OrganizationType::_attribute_id &OrganizationType::_attribute_id::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &OrganizationType::_attribute_name::GetName() const
{
    static const std::string cName = "name";
    return cName;
}
const cpporm::PropertyMap &OrganizationType::_attribute_name::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "TEXT"}};
    return cMap;
}
OrganizationType::_attribute_name &OrganizationType::_attribute_name::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
OrganizationType::_attribute_name &OrganizationType::_attribute_name::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &OrganizationType::_attribute_description::GetName() const
{
    static const std::string cName = "description";
    return cName;
}
const cpporm::PropertyMap &OrganizationType::_attribute_description::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "TEXT"}};
    return cMap;
}
OrganizationType::_attribute_description &OrganizationType::_attribute_description::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
OrganizationType::_attribute_description &OrganizationType::_attribute_description::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &OrganizationType::_index_primary_key::GetName() const
{
    static const std::string cName = "primary_key";
    return cName;
}
const cpporm::PropertyMap &OrganizationType::_index_primary_key::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &OrganizationType::_index_primary_key::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(OrganizationType, id)};
    return cMap;
}
OrganizationType::_index_primary_key OrganizationType::primary_key;
const std::string &OrganizationType::_index_unique_name::GetName() const
{
    static const std::string cName = "unique_name";
    return cName;
}
const cpporm::PropertyMap &OrganizationType::_index_unique_name::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &OrganizationType::_index_unique_name::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(OrganizationType, name)};
    return cMap;
}
OrganizationType::_index_unique_name OrganizationType::unique_name;
const std::string &OrganizationType::_relationship_all_Organization_type_id::GetName() const
{
    static const std::string cName = "all_Organization_type_id";
    return cName;
}
const cpporm::PropertyMap &OrganizationType::_relationship_all_Organization_type_id::GetProperties()
    const
{
    return Organization::foreign_key_type_id.GetProperties();
}
const std::vector<std::string>
    &OrganizationType::_relationship_all_Organization_type_id::GetForeignKeyNames() const
{
    static const std::vector<std::string> cNames = {"type_id"};
    return cNames;
}
const std::vector<std::string>
    &OrganizationType::_relationship_all_Organization_type_id::GetReferencedNames() const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &OrganizationType::_relationship_all_Organization_type_id::GetReciprocalName()
    const
{
    static const std::string cName = "type_id_Organization";
    return cName;
}
cpporm::Entity &OrganizationType::_relationship_all_Organization_type_id::GetPrototype() const
{
    static OrganizationType cEntity;
    return cEntity;
}
cpporm::Entity *OrganizationType::Clone() const
{
    return new OrganizationType(*this);
}
const std::string &OrganizationType::GetName() const
{
    static const std::string cName = "OrganizationType";
    return cName;
}
const cpporm::PropertyMap &OrganizationType::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &OrganizationType::GetAttributes() const
{
    static const cpporm::AttributeMap cMap
        = {CPPORM_MAP_ATTRIBUTE(OrganizationType, id), CPPORM_MAP_ATTRIBUTE(OrganizationType, name),
           CPPORM_MAP_ATTRIBUTE(OrganizationType, description)};
    return cMap;
}
const cpporm::IndexMap &OrganizationType::GetIndices() const
{
    static const cpporm::IndexMap cMap = {CPPORM_MAP_INDEX(OrganizationType, primary_key),
                                          CPPORM_MAP_INDEX(OrganizationType, unique_name)};
    return cMap;
}
const cpporm::RelationshipMap &OrganizationType::GetRelationships() const
{
    static const cpporm::RelationshipMap cMap
        = {CPPORM_MAP_RELATIONSHIP(OrganizationType, all_Organization_type_id)};
    return cMap;
}

/*******************************************************************************
 * TeamMembership
 ******************************************************************************/
const std::string &TeamMembership::_attribute_id::GetName() const
{
    static const std::string cName = "id";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::_attribute_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap
        = {{"IDENTITY", ""}, {"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
TeamMembership::_attribute_id &TeamMembership::_attribute_id::operator=(const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
TeamMembership::_attribute_id &TeamMembership::_attribute_id::operator=(const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &TeamMembership::_attribute_team_id::GetName() const
{
    static const std::string cName = "team_id";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::_attribute_team_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
TeamMembership::_attribute_team_id &TeamMembership::_attribute_team_id::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
TeamMembership::_attribute_team_id &TeamMembership::_attribute_team_id::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &TeamMembership::_attribute_user_id::GetName() const
{
    static const std::string cName = "user_id";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::_attribute_user_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {{"NOT_NULL", ""}, {"DATA_TYPE", "BIGINT"}};
    return cMap;
}
TeamMembership::_attribute_user_id &TeamMembership::_attribute_user_id::operator=(
    const Attribute &other)
{
    mValue = other.Get();
    return *this;
}
TeamMembership::_attribute_user_id &TeamMembership::_attribute_user_id::operator=(
    const std::string &value)
{
    mValue = value;
    return *this;
}
const std::string &TeamMembership::_index_primary_key::GetName() const
{
    static const std::string cName = "primary_key";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::_index_primary_key::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &TeamMembership::_index_primary_key::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(TeamMembership, id)};
    return cMap;
}
TeamMembership::_index_primary_key TeamMembership::primary_key;
const std::string &TeamMembership::_index_unique_team_id_user_id::GetName() const
{
    static const std::string cName = "unique_team_id_user_id";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::_index_unique_team_id_user_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &TeamMembership::_index_unique_team_id_user_id::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(TeamMembership, team_id),
                                              CPPORM_MAP_ATTRIBUTE(TeamMembership, user_id)};
    return cMap;
}
TeamMembership::_index_unique_team_id_user_id TeamMembership::unique_team_id_user_id;
const std::string &TeamMembership::_index_foreign_key_user_id::GetName() const
{
    static const std::string cName = "foreign_key_user_id";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::_index_foreign_key_user_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &TeamMembership::_index_foreign_key_user_id::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(TeamMembership, user_id)};
    return cMap;
}
TeamMembership::_index_foreign_key_user_id TeamMembership::foreign_key_user_id;
const std::string &TeamMembership::_index_foreign_key_team_id::GetName() const
{
    static const std::string cName = "foreign_key_team_id";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::_index_foreign_key_team_id::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &TeamMembership::_index_foreign_key_team_id::GetAttributes() const
{
    static const cpporm::AttributeMap cMap = {CPPORM_MAP_ATTRIBUTE(TeamMembership, team_id)};
    return cMap;
}
TeamMembership::_index_foreign_key_team_id TeamMembership::foreign_key_team_id;
const std::string &TeamMembership::_relationship_user_id_User::GetName() const
{
    static const std::string cName = "user_id_User";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::_relationship_user_id_User::GetProperties() const
{
    return TeamMembership::foreign_key_user_id.GetProperties();
}
const std::vector<std::string> &TeamMembership::_relationship_user_id_User::GetForeignKeyNames()
    const
{
    static const std::vector<std::string> cNames = {"user_id"};
    return cNames;
}
const std::vector<std::string> &TeamMembership::_relationship_user_id_User::GetReferencedNames()
    const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &TeamMembership::_relationship_user_id_User::GetReciprocalName() const
{
    static const std::string cName = "all_User_user_id";
    return cName;
}
cpporm::Entity &TeamMembership::_relationship_user_id_User::GetPrototype() const
{
    static TeamMembership cEntity;
    return cEntity;
}
User *TeamMembership::_relationship_user_id_User::operator->()
{
    return Get<User>();
}
User &TeamMembership::_relationship_user_id_User::operator*()
{
    return *Get<User>();
}
const std::string &TeamMembership::_relationship_team_id_Team::GetName() const
{
    static const std::string cName = "team_id_Team";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::_relationship_team_id_Team::GetProperties() const
{
    return TeamMembership::foreign_key_team_id.GetProperties();
}
const std::vector<std::string> &TeamMembership::_relationship_team_id_Team::GetForeignKeyNames()
    const
{
    static const std::vector<std::string> cNames = {"team_id"};
    return cNames;
}
const std::vector<std::string> &TeamMembership::_relationship_team_id_Team::GetReferencedNames()
    const
{
    static const std::vector<std::string> cNames = {"id"};
    return cNames;
}
const std::string &TeamMembership::_relationship_team_id_Team::GetReciprocalName() const
{
    static const std::string cName = "all_Team_team_id";
    return cName;
}
cpporm::Entity &TeamMembership::_relationship_team_id_Team::GetPrototype() const
{
    static TeamMembership cEntity;
    return cEntity;
}
Team *TeamMembership::_relationship_team_id_Team::operator->()
{
    return Get<Team>();
}
Team &TeamMembership::_relationship_team_id_Team::operator*()
{
    return *Get<Team>();
}
cpporm::Entity *TeamMembership::Clone() const
{
    return new TeamMembership(*this);
}
const std::string &TeamMembership::GetName() const
{
    static const std::string cName = "TeamMembership";
    return cName;
}
const cpporm::PropertyMap &TeamMembership::GetProperties() const
{
    static const cpporm::PropertyMap cMap = {};
    return cMap;
}
const cpporm::AttributeMap &TeamMembership::GetAttributes() const
{
    static const cpporm::AttributeMap cMap
        = {CPPORM_MAP_ATTRIBUTE(TeamMembership, id), CPPORM_MAP_ATTRIBUTE(TeamMembership, team_id),
           CPPORM_MAP_ATTRIBUTE(TeamMembership, user_id)};
    return cMap;
}
const cpporm::IndexMap &TeamMembership::GetIndices() const
{
    static const cpporm::IndexMap cMap = {CPPORM_MAP_INDEX(TeamMembership, primary_key),
                                          CPPORM_MAP_INDEX(TeamMembership, unique_team_id_user_id),
                                          CPPORM_MAP_INDEX(TeamMembership, foreign_key_user_id),
                                          CPPORM_MAP_INDEX(TeamMembership, foreign_key_team_id)};
    return cMap;
}
const cpporm::RelationshipMap &TeamMembership::GetRelationships() const
{
    static const cpporm::RelationshipMap cMap
        = {CPPORM_MAP_RELATIONSHIP(TeamMembership, user_id_User),
           CPPORM_MAP_RELATIONSHIP(TeamMembership, team_id_Team)};
    return cMap;
}

} // namespace orm
