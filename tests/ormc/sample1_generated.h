// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SAMPLE1_FLAT_H_
#define FLATBUFFERS_GENERATED_SAMPLE1_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct User;

struct Organization;

struct Team;

struct OrganizationType;

struct TeamMembership;

struct User FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_CREATED_AT = 6,
    VT_UPDATED_AT = 8,
    VT_DELETED_AT = 10,
    VT_CREATED_BY = 12,
    VT_UPDATED_BY = 14,
    VT_DELETED_BY = 16,
    VT_NAME = 18,
    VT_EMAIL = 20,
    VT_BIRTH_DATE = 22,
    VT_PERSONAL_ID = 24,
    VT_PROFESSIONAL_ID = 26,
    VT_CREATED_BY_USER = 28,
    VT_UPDATED_BY_USER = 30,
    VT_DELETED_BY_USER = 32,
    VT_USER_CREATED_BY = 34,
    VT_USER_UPDATED_BY = 36,
    VT_USER_DELETED_BY = 38,
    VT_ORGANIZATION_CREATED_BY = 40,
    VT_ORGANIZATION_UPDATED_BY = 42,
    VT_ORGANIZATION_DELETED_BY = 44,
    VT_TEAM_CREATED_BY = 46,
    VT_TEAM_UPDATED_BY = 48,
    VT_TEAM_DELETED_BY = 50,
    VT_TEAMMEMBERSHIP_USER_ID = 52
  };
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(VT_ID); }
  const flatbuffers::String *created_at() const { return GetPointer<const flatbuffers::String *>(VT_CREATED_AT); }
  const flatbuffers::String *updated_at() const { return GetPointer<const flatbuffers::String *>(VT_UPDATED_AT); }
  const flatbuffers::String *deleted_at() const { return GetPointer<const flatbuffers::String *>(VT_DELETED_AT); }
  const flatbuffers::String *created_by() const { return GetPointer<const flatbuffers::String *>(VT_CREATED_BY); }
  const flatbuffers::String *updated_by() const { return GetPointer<const flatbuffers::String *>(VT_UPDATED_BY); }
  const flatbuffers::String *deleted_by() const { return GetPointer<const flatbuffers::String *>(VT_DELETED_BY); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  const flatbuffers::String *email() const { return GetPointer<const flatbuffers::String *>(VT_EMAIL); }
  const flatbuffers::String *birth_date() const { return GetPointer<const flatbuffers::String *>(VT_BIRTH_DATE); }
  const flatbuffers::String *personal_id() const { return GetPointer<const flatbuffers::String *>(VT_PERSONAL_ID); }
  const flatbuffers::String *professional_id() const { return GetPointer<const flatbuffers::String *>(VT_PROFESSIONAL_ID); }
  const User *created_by_User() const { return GetPointer<const User *>(VT_CREATED_BY_USER); }
  const User *updated_by_User() const { return GetPointer<const User *>(VT_UPDATED_BY_USER); }
  const User *deleted_by_User() const { return GetPointer<const User *>(VT_DELETED_BY_USER); }
  const flatbuffers::Vector<flatbuffers::Offset<User>> *User_created_by() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<User>> *>(VT_USER_CREATED_BY); }
  const flatbuffers::Vector<flatbuffers::Offset<User>> *User_updated_by() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<User>> *>(VT_USER_UPDATED_BY); }
  const flatbuffers::Vector<flatbuffers::Offset<User>> *User_deleted_by() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<User>> *>(VT_USER_DELETED_BY); }
  const flatbuffers::Vector<flatbuffers::Offset<Organization>> *Organization_created_by() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Organization>> *>(VT_ORGANIZATION_CREATED_BY); }
  const flatbuffers::Vector<flatbuffers::Offset<Organization>> *Organization_updated_by() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Organization>> *>(VT_ORGANIZATION_UPDATED_BY); }
  const flatbuffers::Vector<flatbuffers::Offset<Organization>> *Organization_deleted_by() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Organization>> *>(VT_ORGANIZATION_DELETED_BY); }
  const flatbuffers::Vector<flatbuffers::Offset<Team>> *Team_created_by() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Team>> *>(VT_TEAM_CREATED_BY); }
  const flatbuffers::Vector<flatbuffers::Offset<Team>> *Team_updated_by() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Team>> *>(VT_TEAM_UPDATED_BY); }
  const flatbuffers::Vector<flatbuffers::Offset<Team>> *Team_deleted_by() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Team>> *>(VT_TEAM_DELETED_BY); }
  const flatbuffers::Vector<flatbuffers::Offset<TeamMembership>> *TeamMembership_user_id() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TeamMembership>> *>(VT_TEAMMEMBERSHIP_USER_ID); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CREATED_AT) &&
           verifier.Verify(created_at()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UPDATED_AT) &&
           verifier.Verify(updated_at()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DELETED_AT) &&
           verifier.Verify(deleted_at()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CREATED_BY) &&
           verifier.Verify(created_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UPDATED_BY) &&
           verifier.Verify(updated_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DELETED_BY) &&
           verifier.Verify(deleted_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_EMAIL) &&
           verifier.Verify(email()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BIRTH_DATE) &&
           verifier.Verify(birth_date()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PERSONAL_ID) &&
           verifier.Verify(personal_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PROFESSIONAL_ID) &&
           verifier.Verify(professional_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CREATED_BY_USER) &&
           verifier.VerifyTable(created_by_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UPDATED_BY_USER) &&
           verifier.VerifyTable(updated_by_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DELETED_BY_USER) &&
           verifier.VerifyTable(deleted_by_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_CREATED_BY) &&
           verifier.Verify(User_created_by()) &&
           verifier.VerifyVectorOfTables(User_created_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_UPDATED_BY) &&
           verifier.Verify(User_updated_by()) &&
           verifier.VerifyVectorOfTables(User_updated_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_DELETED_BY) &&
           verifier.Verify(User_deleted_by()) &&
           verifier.VerifyVectorOfTables(User_deleted_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ORGANIZATION_CREATED_BY) &&
           verifier.Verify(Organization_created_by()) &&
           verifier.VerifyVectorOfTables(Organization_created_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ORGANIZATION_UPDATED_BY) &&
           verifier.Verify(Organization_updated_by()) &&
           verifier.VerifyVectorOfTables(Organization_updated_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ORGANIZATION_DELETED_BY) &&
           verifier.Verify(Organization_deleted_by()) &&
           verifier.VerifyVectorOfTables(Organization_deleted_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEAM_CREATED_BY) &&
           verifier.Verify(Team_created_by()) &&
           verifier.VerifyVectorOfTables(Team_created_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEAM_UPDATED_BY) &&
           verifier.Verify(Team_updated_by()) &&
           verifier.VerifyVectorOfTables(Team_updated_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEAM_DELETED_BY) &&
           verifier.Verify(Team_deleted_by()) &&
           verifier.VerifyVectorOfTables(Team_deleted_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEAMMEMBERSHIP_USER_ID) &&
           verifier.Verify(TeamMembership_user_id()) &&
           verifier.VerifyVectorOfTables(TeamMembership_user_id()) &&
           verifier.EndTable();
  }
};

struct UserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(User::VT_ID, id); }
  void add_created_at(flatbuffers::Offset<flatbuffers::String> created_at) { fbb_.AddOffset(User::VT_CREATED_AT, created_at); }
  void add_updated_at(flatbuffers::Offset<flatbuffers::String> updated_at) { fbb_.AddOffset(User::VT_UPDATED_AT, updated_at); }
  void add_deleted_at(flatbuffers::Offset<flatbuffers::String> deleted_at) { fbb_.AddOffset(User::VT_DELETED_AT, deleted_at); }
  void add_created_by(flatbuffers::Offset<flatbuffers::String> created_by) { fbb_.AddOffset(User::VT_CREATED_BY, created_by); }
  void add_updated_by(flatbuffers::Offset<flatbuffers::String> updated_by) { fbb_.AddOffset(User::VT_UPDATED_BY, updated_by); }
  void add_deleted_by(flatbuffers::Offset<flatbuffers::String> deleted_by) { fbb_.AddOffset(User::VT_DELETED_BY, deleted_by); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(User::VT_NAME, name); }
  void add_email(flatbuffers::Offset<flatbuffers::String> email) { fbb_.AddOffset(User::VT_EMAIL, email); }
  void add_birth_date(flatbuffers::Offset<flatbuffers::String> birth_date) { fbb_.AddOffset(User::VT_BIRTH_DATE, birth_date); }
  void add_personal_id(flatbuffers::Offset<flatbuffers::String> personal_id) { fbb_.AddOffset(User::VT_PERSONAL_ID, personal_id); }
  void add_professional_id(flatbuffers::Offset<flatbuffers::String> professional_id) { fbb_.AddOffset(User::VT_PROFESSIONAL_ID, professional_id); }
  void add_created_by_User(flatbuffers::Offset<User> created_by_User) { fbb_.AddOffset(User::VT_CREATED_BY_USER, created_by_User); }
  void add_updated_by_User(flatbuffers::Offset<User> updated_by_User) { fbb_.AddOffset(User::VT_UPDATED_BY_USER, updated_by_User); }
  void add_deleted_by_User(flatbuffers::Offset<User> deleted_by_User) { fbb_.AddOffset(User::VT_DELETED_BY_USER, deleted_by_User); }
  void add_User_created_by(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<User>>> User_created_by) { fbb_.AddOffset(User::VT_USER_CREATED_BY, User_created_by); }
  void add_User_updated_by(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<User>>> User_updated_by) { fbb_.AddOffset(User::VT_USER_UPDATED_BY, User_updated_by); }
  void add_User_deleted_by(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<User>>> User_deleted_by) { fbb_.AddOffset(User::VT_USER_DELETED_BY, User_deleted_by); }
  void add_Organization_created_by(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Organization>>> Organization_created_by) { fbb_.AddOffset(User::VT_ORGANIZATION_CREATED_BY, Organization_created_by); }
  void add_Organization_updated_by(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Organization>>> Organization_updated_by) { fbb_.AddOffset(User::VT_ORGANIZATION_UPDATED_BY, Organization_updated_by); }
  void add_Organization_deleted_by(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Organization>>> Organization_deleted_by) { fbb_.AddOffset(User::VT_ORGANIZATION_DELETED_BY, Organization_deleted_by); }
  void add_Team_created_by(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Team>>> Team_created_by) { fbb_.AddOffset(User::VT_TEAM_CREATED_BY, Team_created_by); }
  void add_Team_updated_by(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Team>>> Team_updated_by) { fbb_.AddOffset(User::VT_TEAM_UPDATED_BY, Team_updated_by); }
  void add_Team_deleted_by(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Team>>> Team_deleted_by) { fbb_.AddOffset(User::VT_TEAM_DELETED_BY, Team_deleted_by); }
  void add_TeamMembership_user_id(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TeamMembership>>> TeamMembership_user_id) { fbb_.AddOffset(User::VT_TEAMMEMBERSHIP_USER_ID, TeamMembership_user_id); }
  UserBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  UserBuilder &operator=(const UserBuilder &);
  flatbuffers::Offset<User> Finish() {
    auto o = flatbuffers::Offset<User>(fbb_.EndTable(start_, 25));
    return o;
  }
};

inline flatbuffers::Offset<User> CreateUser(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> created_at = 0,
    flatbuffers::Offset<flatbuffers::String> updated_at = 0,
    flatbuffers::Offset<flatbuffers::String> deleted_at = 0,
    flatbuffers::Offset<flatbuffers::String> created_by = 0,
    flatbuffers::Offset<flatbuffers::String> updated_by = 0,
    flatbuffers::Offset<flatbuffers::String> deleted_by = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> email = 0,
    flatbuffers::Offset<flatbuffers::String> birth_date = 0,
    flatbuffers::Offset<flatbuffers::String> personal_id = 0,
    flatbuffers::Offset<flatbuffers::String> professional_id = 0,
    flatbuffers::Offset<User> created_by_User = 0,
    flatbuffers::Offset<User> updated_by_User = 0,
    flatbuffers::Offset<User> deleted_by_User = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<User>>> User_created_by = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<User>>> User_updated_by = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<User>>> User_deleted_by = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Organization>>> Organization_created_by = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Organization>>> Organization_updated_by = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Organization>>> Organization_deleted_by = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Team>>> Team_created_by = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Team>>> Team_updated_by = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Team>>> Team_deleted_by = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TeamMembership>>> TeamMembership_user_id = 0) {
  UserBuilder builder_(_fbb);
  builder_.add_TeamMembership_user_id(TeamMembership_user_id);
  builder_.add_Team_deleted_by(Team_deleted_by);
  builder_.add_Team_updated_by(Team_updated_by);
  builder_.add_Team_created_by(Team_created_by);
  builder_.add_Organization_deleted_by(Organization_deleted_by);
  builder_.add_Organization_updated_by(Organization_updated_by);
  builder_.add_Organization_created_by(Organization_created_by);
  builder_.add_User_deleted_by(User_deleted_by);
  builder_.add_User_updated_by(User_updated_by);
  builder_.add_User_created_by(User_created_by);
  builder_.add_deleted_by_User(deleted_by_User);
  builder_.add_updated_by_User(updated_by_User);
  builder_.add_created_by_User(created_by_User);
  builder_.add_professional_id(professional_id);
  builder_.add_personal_id(personal_id);
  builder_.add_birth_date(birth_date);
  builder_.add_email(email);
  builder_.add_name(name);
  builder_.add_deleted_by(deleted_by);
  builder_.add_updated_by(updated_by);
  builder_.add_created_by(created_by);
  builder_.add_deleted_at(deleted_at);
  builder_.add_updated_at(updated_at);
  builder_.add_created_at(created_at);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<User> CreateUserDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *created_at = nullptr,
    const char *updated_at = nullptr,
    const char *deleted_at = nullptr,
    const char *created_by = nullptr,
    const char *updated_by = nullptr,
    const char *deleted_by = nullptr,
    const char *name = nullptr,
    const char *email = nullptr,
    const char *birth_date = nullptr,
    const char *personal_id = nullptr,
    const char *professional_id = nullptr,
    flatbuffers::Offset<User> created_by_User = 0,
    flatbuffers::Offset<User> updated_by_User = 0,
    flatbuffers::Offset<User> deleted_by_User = 0,
    const std::vector<flatbuffers::Offset<User>> *User_created_by = nullptr,
    const std::vector<flatbuffers::Offset<User>> *User_updated_by = nullptr,
    const std::vector<flatbuffers::Offset<User>> *User_deleted_by = nullptr,
    const std::vector<flatbuffers::Offset<Organization>> *Organization_created_by = nullptr,
    const std::vector<flatbuffers::Offset<Organization>> *Organization_updated_by = nullptr,
    const std::vector<flatbuffers::Offset<Organization>> *Organization_deleted_by = nullptr,
    const std::vector<flatbuffers::Offset<Team>> *Team_created_by = nullptr,
    const std::vector<flatbuffers::Offset<Team>> *Team_updated_by = nullptr,
    const std::vector<flatbuffers::Offset<Team>> *Team_deleted_by = nullptr,
    const std::vector<flatbuffers::Offset<TeamMembership>> *TeamMembership_user_id = nullptr) {
  return CreateUser(_fbb, id ? _fbb.CreateString(id) : 0, created_at ? _fbb.CreateString(created_at) : 0, updated_at ? _fbb.CreateString(updated_at) : 0, deleted_at ? _fbb.CreateString(deleted_at) : 0, created_by ? _fbb.CreateString(created_by) : 0, updated_by ? _fbb.CreateString(updated_by) : 0, deleted_by ? _fbb.CreateString(deleted_by) : 0, name ? _fbb.CreateString(name) : 0, email ? _fbb.CreateString(email) : 0, birth_date ? _fbb.CreateString(birth_date) : 0, personal_id ? _fbb.CreateString(personal_id) : 0, professional_id ? _fbb.CreateString(professional_id) : 0, created_by_User, updated_by_User, deleted_by_User, User_created_by ? _fbb.CreateVector<flatbuffers::Offset<User>>(*User_created_by) : 0, User_updated_by ? _fbb.CreateVector<flatbuffers::Offset<User>>(*User_updated_by) : 0, User_deleted_by ? _fbb.CreateVector<flatbuffers::Offset<User>>(*User_deleted_by) : 0, Organization_created_by ? _fbb.CreateVector<flatbuffers::Offset<Organization>>(*Organization_created_by) : 0, Organization_updated_by ? _fbb.CreateVector<flatbuffers::Offset<Organization>>(*Organization_updated_by) : 0, Organization_deleted_by ? _fbb.CreateVector<flatbuffers::Offset<Organization>>(*Organization_deleted_by) : 0, Team_created_by ? _fbb.CreateVector<flatbuffers::Offset<Team>>(*Team_created_by) : 0, Team_updated_by ? _fbb.CreateVector<flatbuffers::Offset<Team>>(*Team_updated_by) : 0, Team_deleted_by ? _fbb.CreateVector<flatbuffers::Offset<Team>>(*Team_deleted_by) : 0, TeamMembership_user_id ? _fbb.CreateVector<flatbuffers::Offset<TeamMembership>>(*TeamMembership_user_id) : 0);
}

struct Organization FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_CREATED_AT = 6,
    VT_UPDATED_AT = 8,
    VT_DELETED_AT = 10,
    VT_CREATED_BY = 12,
    VT_UPDATED_BY = 14,
    VT_DELETED_BY = 16,
    VT_NAME = 18,
    VT_TYPE_ID = 20,
    VT_LEGAL_ID = 22,
    VT_LEGAL_NAME = 24,
    VT_DESCRIPTION = 26,
    VT_CREATED_BY_USER = 28,
    VT_UPDATED_BY_USER = 30,
    VT_DELETED_BY_USER = 32,
    VT_TYPE_ID_ORGANIZATIONTYPE = 34,
    VT_TEAM_ORGANIZATION_ID = 36
  };
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(VT_ID); }
  const flatbuffers::String *created_at() const { return GetPointer<const flatbuffers::String *>(VT_CREATED_AT); }
  const flatbuffers::String *updated_at() const { return GetPointer<const flatbuffers::String *>(VT_UPDATED_AT); }
  const flatbuffers::String *deleted_at() const { return GetPointer<const flatbuffers::String *>(VT_DELETED_AT); }
  const flatbuffers::String *created_by() const { return GetPointer<const flatbuffers::String *>(VT_CREATED_BY); }
  const flatbuffers::String *updated_by() const { return GetPointer<const flatbuffers::String *>(VT_UPDATED_BY); }
  const flatbuffers::String *deleted_by() const { return GetPointer<const flatbuffers::String *>(VT_DELETED_BY); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  const flatbuffers::String *type_id() const { return GetPointer<const flatbuffers::String *>(VT_TYPE_ID); }
  const flatbuffers::String *legal_id() const { return GetPointer<const flatbuffers::String *>(VT_LEGAL_ID); }
  const flatbuffers::String *legal_name() const { return GetPointer<const flatbuffers::String *>(VT_LEGAL_NAME); }
  const flatbuffers::String *description() const { return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION); }
  const User *created_by_User() const { return GetPointer<const User *>(VT_CREATED_BY_USER); }
  const User *updated_by_User() const { return GetPointer<const User *>(VT_UPDATED_BY_USER); }
  const User *deleted_by_User() const { return GetPointer<const User *>(VT_DELETED_BY_USER); }
  const OrganizationType *type_id_OrganizationType() const { return GetPointer<const OrganizationType *>(VT_TYPE_ID_ORGANIZATIONTYPE); }
  const flatbuffers::Vector<flatbuffers::Offset<Team>> *Team_organization_id() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Team>> *>(VT_TEAM_ORGANIZATION_ID); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CREATED_AT) &&
           verifier.Verify(created_at()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UPDATED_AT) &&
           verifier.Verify(updated_at()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DELETED_AT) &&
           verifier.Verify(deleted_at()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CREATED_BY) &&
           verifier.Verify(created_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UPDATED_BY) &&
           verifier.Verify(updated_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DELETED_BY) &&
           verifier.Verify(deleted_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TYPE_ID) &&
           verifier.Verify(type_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_LEGAL_ID) &&
           verifier.Verify(legal_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_LEGAL_NAME) &&
           verifier.Verify(legal_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DESCRIPTION) &&
           verifier.Verify(description()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CREATED_BY_USER) &&
           verifier.VerifyTable(created_by_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UPDATED_BY_USER) &&
           verifier.VerifyTable(updated_by_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DELETED_BY_USER) &&
           verifier.VerifyTable(deleted_by_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TYPE_ID_ORGANIZATIONTYPE) &&
           verifier.VerifyTable(type_id_OrganizationType()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEAM_ORGANIZATION_ID) &&
           verifier.Verify(Team_organization_id()) &&
           verifier.VerifyVectorOfTables(Team_organization_id()) &&
           verifier.EndTable();
  }
};

struct OrganizationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(Organization::VT_ID, id); }
  void add_created_at(flatbuffers::Offset<flatbuffers::String> created_at) { fbb_.AddOffset(Organization::VT_CREATED_AT, created_at); }
  void add_updated_at(flatbuffers::Offset<flatbuffers::String> updated_at) { fbb_.AddOffset(Organization::VT_UPDATED_AT, updated_at); }
  void add_deleted_at(flatbuffers::Offset<flatbuffers::String> deleted_at) { fbb_.AddOffset(Organization::VT_DELETED_AT, deleted_at); }
  void add_created_by(flatbuffers::Offset<flatbuffers::String> created_by) { fbb_.AddOffset(Organization::VT_CREATED_BY, created_by); }
  void add_updated_by(flatbuffers::Offset<flatbuffers::String> updated_by) { fbb_.AddOffset(Organization::VT_UPDATED_BY, updated_by); }
  void add_deleted_by(flatbuffers::Offset<flatbuffers::String> deleted_by) { fbb_.AddOffset(Organization::VT_DELETED_BY, deleted_by); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Organization::VT_NAME, name); }
  void add_type_id(flatbuffers::Offset<flatbuffers::String> type_id) { fbb_.AddOffset(Organization::VT_TYPE_ID, type_id); }
  void add_legal_id(flatbuffers::Offset<flatbuffers::String> legal_id) { fbb_.AddOffset(Organization::VT_LEGAL_ID, legal_id); }
  void add_legal_name(flatbuffers::Offset<flatbuffers::String> legal_name) { fbb_.AddOffset(Organization::VT_LEGAL_NAME, legal_name); }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) { fbb_.AddOffset(Organization::VT_DESCRIPTION, description); }
  void add_created_by_User(flatbuffers::Offset<User> created_by_User) { fbb_.AddOffset(Organization::VT_CREATED_BY_USER, created_by_User); }
  void add_updated_by_User(flatbuffers::Offset<User> updated_by_User) { fbb_.AddOffset(Organization::VT_UPDATED_BY_USER, updated_by_User); }
  void add_deleted_by_User(flatbuffers::Offset<User> deleted_by_User) { fbb_.AddOffset(Organization::VT_DELETED_BY_USER, deleted_by_User); }
  void add_type_id_OrganizationType(flatbuffers::Offset<OrganizationType> type_id_OrganizationType) { fbb_.AddOffset(Organization::VT_TYPE_ID_ORGANIZATIONTYPE, type_id_OrganizationType); }
  void add_Team_organization_id(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Team>>> Team_organization_id) { fbb_.AddOffset(Organization::VT_TEAM_ORGANIZATION_ID, Team_organization_id); }
  OrganizationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  OrganizationBuilder &operator=(const OrganizationBuilder &);
  flatbuffers::Offset<Organization> Finish() {
    auto o = flatbuffers::Offset<Organization>(fbb_.EndTable(start_, 17));
    return o;
  }
};

inline flatbuffers::Offset<Organization> CreateOrganization(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> created_at = 0,
    flatbuffers::Offset<flatbuffers::String> updated_at = 0,
    flatbuffers::Offset<flatbuffers::String> deleted_at = 0,
    flatbuffers::Offset<flatbuffers::String> created_by = 0,
    flatbuffers::Offset<flatbuffers::String> updated_by = 0,
    flatbuffers::Offset<flatbuffers::String> deleted_by = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> type_id = 0,
    flatbuffers::Offset<flatbuffers::String> legal_id = 0,
    flatbuffers::Offset<flatbuffers::String> legal_name = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    flatbuffers::Offset<User> created_by_User = 0,
    flatbuffers::Offset<User> updated_by_User = 0,
    flatbuffers::Offset<User> deleted_by_User = 0,
    flatbuffers::Offset<OrganizationType> type_id_OrganizationType = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Team>>> Team_organization_id = 0) {
  OrganizationBuilder builder_(_fbb);
  builder_.add_Team_organization_id(Team_organization_id);
  builder_.add_type_id_OrganizationType(type_id_OrganizationType);
  builder_.add_deleted_by_User(deleted_by_User);
  builder_.add_updated_by_User(updated_by_User);
  builder_.add_created_by_User(created_by_User);
  builder_.add_description(description);
  builder_.add_legal_name(legal_name);
  builder_.add_legal_id(legal_id);
  builder_.add_type_id(type_id);
  builder_.add_name(name);
  builder_.add_deleted_by(deleted_by);
  builder_.add_updated_by(updated_by);
  builder_.add_created_by(created_by);
  builder_.add_deleted_at(deleted_at);
  builder_.add_updated_at(updated_at);
  builder_.add_created_at(created_at);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Organization> CreateOrganizationDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *created_at = nullptr,
    const char *updated_at = nullptr,
    const char *deleted_at = nullptr,
    const char *created_by = nullptr,
    const char *updated_by = nullptr,
    const char *deleted_by = nullptr,
    const char *name = nullptr,
    const char *type_id = nullptr,
    const char *legal_id = nullptr,
    const char *legal_name = nullptr,
    const char *description = nullptr,
    flatbuffers::Offset<User> created_by_User = 0,
    flatbuffers::Offset<User> updated_by_User = 0,
    flatbuffers::Offset<User> deleted_by_User = 0,
    flatbuffers::Offset<OrganizationType> type_id_OrganizationType = 0,
    const std::vector<flatbuffers::Offset<Team>> *Team_organization_id = nullptr) {
  return CreateOrganization(_fbb, id ? _fbb.CreateString(id) : 0, created_at ? _fbb.CreateString(created_at) : 0, updated_at ? _fbb.CreateString(updated_at) : 0, deleted_at ? _fbb.CreateString(deleted_at) : 0, created_by ? _fbb.CreateString(created_by) : 0, updated_by ? _fbb.CreateString(updated_by) : 0, deleted_by ? _fbb.CreateString(deleted_by) : 0, name ? _fbb.CreateString(name) : 0, type_id ? _fbb.CreateString(type_id) : 0, legal_id ? _fbb.CreateString(legal_id) : 0, legal_name ? _fbb.CreateString(legal_name) : 0, description ? _fbb.CreateString(description) : 0, created_by_User, updated_by_User, deleted_by_User, type_id_OrganizationType, Team_organization_id ? _fbb.CreateVector<flatbuffers::Offset<Team>>(*Team_organization_id) : 0);
}

struct Team FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_CREATED_AT = 6,
    VT_UPDATED_AT = 8,
    VT_DELETED_AT = 10,
    VT_CREATED_BY = 12,
    VT_UPDATED_BY = 14,
    VT_DELETED_BY = 16,
    VT_ORGANIZATION_ID = 18,
    VT_NAME = 20,
    VT_DESCRIPTION = 22,
    VT_CREATED_BY_USER = 24,
    VT_UPDATED_BY_USER = 26,
    VT_DELETED_BY_USER = 28,
    VT_ORGANIZATION_ID_ORGANIZATION = 30,
    VT_TEAMMEMBERSHIP_TEAM_ID = 32
  };
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(VT_ID); }
  const flatbuffers::String *created_at() const { return GetPointer<const flatbuffers::String *>(VT_CREATED_AT); }
  const flatbuffers::String *updated_at() const { return GetPointer<const flatbuffers::String *>(VT_UPDATED_AT); }
  const flatbuffers::String *deleted_at() const { return GetPointer<const flatbuffers::String *>(VT_DELETED_AT); }
  const flatbuffers::String *created_by() const { return GetPointer<const flatbuffers::String *>(VT_CREATED_BY); }
  const flatbuffers::String *updated_by() const { return GetPointer<const flatbuffers::String *>(VT_UPDATED_BY); }
  const flatbuffers::String *deleted_by() const { return GetPointer<const flatbuffers::String *>(VT_DELETED_BY); }
  const flatbuffers::String *organization_id() const { return GetPointer<const flatbuffers::String *>(VT_ORGANIZATION_ID); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  const flatbuffers::String *description() const { return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION); }
  const User *created_by_User() const { return GetPointer<const User *>(VT_CREATED_BY_USER); }
  const User *updated_by_User() const { return GetPointer<const User *>(VT_UPDATED_BY_USER); }
  const User *deleted_by_User() const { return GetPointer<const User *>(VT_DELETED_BY_USER); }
  const Organization *organization_id_Organization() const { return GetPointer<const Organization *>(VT_ORGANIZATION_ID_ORGANIZATION); }
  const flatbuffers::Vector<flatbuffers::Offset<TeamMembership>> *TeamMembership_team_id() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TeamMembership>> *>(VT_TEAMMEMBERSHIP_TEAM_ID); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CREATED_AT) &&
           verifier.Verify(created_at()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UPDATED_AT) &&
           verifier.Verify(updated_at()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DELETED_AT) &&
           verifier.Verify(deleted_at()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CREATED_BY) &&
           verifier.Verify(created_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UPDATED_BY) &&
           verifier.Verify(updated_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DELETED_BY) &&
           verifier.Verify(deleted_by()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ORGANIZATION_ID) &&
           verifier.Verify(organization_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DESCRIPTION) &&
           verifier.Verify(description()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CREATED_BY_USER) &&
           verifier.VerifyTable(created_by_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_UPDATED_BY_USER) &&
           verifier.VerifyTable(updated_by_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DELETED_BY_USER) &&
           verifier.VerifyTable(deleted_by_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ORGANIZATION_ID_ORGANIZATION) &&
           verifier.VerifyTable(organization_id_Organization()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEAMMEMBERSHIP_TEAM_ID) &&
           verifier.Verify(TeamMembership_team_id()) &&
           verifier.VerifyVectorOfTables(TeamMembership_team_id()) &&
           verifier.EndTable();
  }
};

struct TeamBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(Team::VT_ID, id); }
  void add_created_at(flatbuffers::Offset<flatbuffers::String> created_at) { fbb_.AddOffset(Team::VT_CREATED_AT, created_at); }
  void add_updated_at(flatbuffers::Offset<flatbuffers::String> updated_at) { fbb_.AddOffset(Team::VT_UPDATED_AT, updated_at); }
  void add_deleted_at(flatbuffers::Offset<flatbuffers::String> deleted_at) { fbb_.AddOffset(Team::VT_DELETED_AT, deleted_at); }
  void add_created_by(flatbuffers::Offset<flatbuffers::String> created_by) { fbb_.AddOffset(Team::VT_CREATED_BY, created_by); }
  void add_updated_by(flatbuffers::Offset<flatbuffers::String> updated_by) { fbb_.AddOffset(Team::VT_UPDATED_BY, updated_by); }
  void add_deleted_by(flatbuffers::Offset<flatbuffers::String> deleted_by) { fbb_.AddOffset(Team::VT_DELETED_BY, deleted_by); }
  void add_organization_id(flatbuffers::Offset<flatbuffers::String> organization_id) { fbb_.AddOffset(Team::VT_ORGANIZATION_ID, organization_id); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(Team::VT_NAME, name); }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) { fbb_.AddOffset(Team::VT_DESCRIPTION, description); }
  void add_created_by_User(flatbuffers::Offset<User> created_by_User) { fbb_.AddOffset(Team::VT_CREATED_BY_USER, created_by_User); }
  void add_updated_by_User(flatbuffers::Offset<User> updated_by_User) { fbb_.AddOffset(Team::VT_UPDATED_BY_USER, updated_by_User); }
  void add_deleted_by_User(flatbuffers::Offset<User> deleted_by_User) { fbb_.AddOffset(Team::VT_DELETED_BY_USER, deleted_by_User); }
  void add_organization_id_Organization(flatbuffers::Offset<Organization> organization_id_Organization) { fbb_.AddOffset(Team::VT_ORGANIZATION_ID_ORGANIZATION, organization_id_Organization); }
  void add_TeamMembership_team_id(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TeamMembership>>> TeamMembership_team_id) { fbb_.AddOffset(Team::VT_TEAMMEMBERSHIP_TEAM_ID, TeamMembership_team_id); }
  TeamBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TeamBuilder &operator=(const TeamBuilder &);
  flatbuffers::Offset<Team> Finish() {
    auto o = flatbuffers::Offset<Team>(fbb_.EndTable(start_, 15));
    return o;
  }
};

inline flatbuffers::Offset<Team> CreateTeam(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> created_at = 0,
    flatbuffers::Offset<flatbuffers::String> updated_at = 0,
    flatbuffers::Offset<flatbuffers::String> deleted_at = 0,
    flatbuffers::Offset<flatbuffers::String> created_by = 0,
    flatbuffers::Offset<flatbuffers::String> updated_by = 0,
    flatbuffers::Offset<flatbuffers::String> deleted_by = 0,
    flatbuffers::Offset<flatbuffers::String> organization_id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    flatbuffers::Offset<User> created_by_User = 0,
    flatbuffers::Offset<User> updated_by_User = 0,
    flatbuffers::Offset<User> deleted_by_User = 0,
    flatbuffers::Offset<Organization> organization_id_Organization = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TeamMembership>>> TeamMembership_team_id = 0) {
  TeamBuilder builder_(_fbb);
  builder_.add_TeamMembership_team_id(TeamMembership_team_id);
  builder_.add_organization_id_Organization(organization_id_Organization);
  builder_.add_deleted_by_User(deleted_by_User);
  builder_.add_updated_by_User(updated_by_User);
  builder_.add_created_by_User(created_by_User);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_organization_id(organization_id);
  builder_.add_deleted_by(deleted_by);
  builder_.add_updated_by(updated_by);
  builder_.add_created_by(created_by);
  builder_.add_deleted_at(deleted_at);
  builder_.add_updated_at(updated_at);
  builder_.add_created_at(created_at);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Team> CreateTeamDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *created_at = nullptr,
    const char *updated_at = nullptr,
    const char *deleted_at = nullptr,
    const char *created_by = nullptr,
    const char *updated_by = nullptr,
    const char *deleted_by = nullptr,
    const char *organization_id = nullptr,
    const char *name = nullptr,
    const char *description = nullptr,
    flatbuffers::Offset<User> created_by_User = 0,
    flatbuffers::Offset<User> updated_by_User = 0,
    flatbuffers::Offset<User> deleted_by_User = 0,
    flatbuffers::Offset<Organization> organization_id_Organization = 0,
    const std::vector<flatbuffers::Offset<TeamMembership>> *TeamMembership_team_id = nullptr) {
  return CreateTeam(_fbb, id ? _fbb.CreateString(id) : 0, created_at ? _fbb.CreateString(created_at) : 0, updated_at ? _fbb.CreateString(updated_at) : 0, deleted_at ? _fbb.CreateString(deleted_at) : 0, created_by ? _fbb.CreateString(created_by) : 0, updated_by ? _fbb.CreateString(updated_by) : 0, deleted_by ? _fbb.CreateString(deleted_by) : 0, organization_id ? _fbb.CreateString(organization_id) : 0, name ? _fbb.CreateString(name) : 0, description ? _fbb.CreateString(description) : 0, created_by_User, updated_by_User, deleted_by_User, organization_id_Organization, TeamMembership_team_id ? _fbb.CreateVector<flatbuffers::Offset<TeamMembership>>(*TeamMembership_team_id) : 0);
}

struct OrganizationType FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_DESCRIPTION = 8,
    VT_ORGANIZATION_TYPE_ID = 10
  };
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(VT_ID); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  const flatbuffers::String *description() const { return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION); }
  const flatbuffers::Vector<flatbuffers::Offset<Organization>> *Organization_type_id() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Organization>> *>(VT_ORGANIZATION_TYPE_ID); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DESCRIPTION) &&
           verifier.Verify(description()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ORGANIZATION_TYPE_ID) &&
           verifier.Verify(Organization_type_id()) &&
           verifier.VerifyVectorOfTables(Organization_type_id()) &&
           verifier.EndTable();
  }
};

struct OrganizationTypeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(OrganizationType::VT_ID, id); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(OrganizationType::VT_NAME, name); }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) { fbb_.AddOffset(OrganizationType::VT_DESCRIPTION, description); }
  void add_Organization_type_id(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Organization>>> Organization_type_id) { fbb_.AddOffset(OrganizationType::VT_ORGANIZATION_TYPE_ID, Organization_type_id); }
  OrganizationTypeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  OrganizationTypeBuilder &operator=(const OrganizationTypeBuilder &);
  flatbuffers::Offset<OrganizationType> Finish() {
    auto o = flatbuffers::Offset<OrganizationType>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<OrganizationType> CreateOrganizationType(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Organization>>> Organization_type_id = 0) {
  OrganizationTypeBuilder builder_(_fbb);
  builder_.add_Organization_type_id(Organization_type_id);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<OrganizationType> CreateOrganizationTypeDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const char *description = nullptr,
    const std::vector<flatbuffers::Offset<Organization>> *Organization_type_id = nullptr) {
  return CreateOrganizationType(_fbb, id ? _fbb.CreateString(id) : 0, name ? _fbb.CreateString(name) : 0, description ? _fbb.CreateString(description) : 0, Organization_type_id ? _fbb.CreateVector<flatbuffers::Offset<Organization>>(*Organization_type_id) : 0);
}

struct TeamMembership FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_TEAM_ID = 6,
    VT_USER_ID = 8,
    VT_USER_ID_USER = 10,
    VT_TEAM_ID_TEAM = 12
  };
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(VT_ID); }
  const flatbuffers::String *team_id() const { return GetPointer<const flatbuffers::String *>(VT_TEAM_ID); }
  const flatbuffers::String *user_id() const { return GetPointer<const flatbuffers::String *>(VT_USER_ID); }
  const User *user_id_User() const { return GetPointer<const User *>(VT_USER_ID_USER); }
  const Team *team_id_Team() const { return GetPointer<const Team *>(VT_TEAM_ID_TEAM); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEAM_ID) &&
           verifier.Verify(team_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_ID) &&
           verifier.Verify(user_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_ID_USER) &&
           verifier.VerifyTable(user_id_User()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEAM_ID_TEAM) &&
           verifier.VerifyTable(team_id_Team()) &&
           verifier.EndTable();
  }
};

struct TeamMembershipBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(TeamMembership::VT_ID, id); }
  void add_team_id(flatbuffers::Offset<flatbuffers::String> team_id) { fbb_.AddOffset(TeamMembership::VT_TEAM_ID, team_id); }
  void add_user_id(flatbuffers::Offset<flatbuffers::String> user_id) { fbb_.AddOffset(TeamMembership::VT_USER_ID, user_id); }
  void add_user_id_User(flatbuffers::Offset<User> user_id_User) { fbb_.AddOffset(TeamMembership::VT_USER_ID_USER, user_id_User); }
  void add_team_id_Team(flatbuffers::Offset<Team> team_id_Team) { fbb_.AddOffset(TeamMembership::VT_TEAM_ID_TEAM, team_id_Team); }
  TeamMembershipBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TeamMembershipBuilder &operator=(const TeamMembershipBuilder &);
  flatbuffers::Offset<TeamMembership> Finish() {
    auto o = flatbuffers::Offset<TeamMembership>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<TeamMembership> CreateTeamMembership(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> team_id = 0,
    flatbuffers::Offset<flatbuffers::String> user_id = 0,
    flatbuffers::Offset<User> user_id_User = 0,
    flatbuffers::Offset<Team> team_id_Team = 0) {
  TeamMembershipBuilder builder_(_fbb);
  builder_.add_team_id_Team(team_id_Team);
  builder_.add_user_id_User(user_id_User);
  builder_.add_user_id(user_id);
  builder_.add_team_id(team_id);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<TeamMembership> CreateTeamMembershipDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *team_id = nullptr,
    const char *user_id = nullptr,
    flatbuffers::Offset<User> user_id_User = 0,
    flatbuffers::Offset<Team> team_id_Team = 0) {
  return CreateTeamMembership(_fbb, id ? _fbb.CreateString(id) : 0, team_id ? _fbb.CreateString(team_id) : 0, user_id ? _fbb.CreateString(user_id) : 0, user_id_User, team_id_Team);
}

inline const flat::User *GetUser(const void *buf) {
  return flatbuffers::GetRoot<flat::User>(buf);
}

inline bool VerifyUserBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::User>(nullptr);
}

inline void FinishUserBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<flat::User> root) {
  fbb.Finish(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_SAMPLE1_FLAT_H_
