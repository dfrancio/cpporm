/*!
 * \file
 * \brief     cpporm entity factory writer implementation
 * \author    Diego Sogari <diego.sogari@gmail.com>
 * \date      2016
 * \copyright All rights reserved
 */
#include "entityfactorywriter.h"

// External library includes
#include <boost/algorithm/string.hpp>
#include <boost/format.hpp>
#include <boost/tokenizer.hpp>

// Global variables
static const auto cOutputStreamFlags = std::ios_base::binary | std::fstream::out;
static const auto cAppendStreamFlags = std::ios_base::ate | std::fstream::in;

namespace cpporm
{
/*!
 * \details
 */
EntityFactoryWriter::EntityFactoryWriter(
    const ListGraph &listGraph, const std::string &dir, const std::string &name)
    : GraphVisitor(listGraph)
{
    mStream.open(dir + "/" + "entityfactory.h", cOutputStreamFlags);
    mStream << boost::format(cPreambleText) % ("entityfactory.h") % CPPORM_VERSION;

    if (!FLAGS_namespace.empty())
        mStream << boost::format(cBeginNamespace) % FLAGS_namespace;
    mStream << cDeclareEntityFactory;
    if (!FLAGS_namespace.empty())
        mStream << boost::format(cNamespaceEnd) % FLAGS_namespace;

    mStream.close();
}

/*!
 * \details
 */
const std::string EntityFactoryWriter::cPreambleText
    = "/*\n"
      " * %s\n"
      " *\n"
      " * generated by the ORM-compiler version %s\n"
      " */\n"
      "#pragma once\n"
      "\n"
      "/*\n"
      " * The entry-point header for cpporm\n"
      " */\n"
      "#include <cpporm/cpporm.h>\n";

/*!
 * \details
 */
const std::string EntityFactoryWriter::cBeginNamespace = "\n"
                                                         "/*\n"
                                                         " * The client namespace\n"
                                                         " */\n"
                                                         "namespace %s {\n";

/*!
 * \brief
 */
const std::string EntityFactoryWriter::cDeclareEntityFactory
    = "\n"
      "/*\n"
      " * The entity factory base type\n"
      " */\n"
      "template <typename T>\n"
      "using EntityFactoryBase = cpporm::util::Factory<T, cpporm::Entity, std::string>;\n"
      "\n"
      "/*\n"
      " * The entity factory\n"
      " */\n"
      "class EntityFactory : public EntityFactoryBase<EntityFactory>\n"
      "{\n"
      "}\n";

/*!
 * \details
 */
const std::string EntityFactoryWriter::cNamespaceEnd = "\n"
                                                       "} // namespace %s\n";

} // namespace cpporm
